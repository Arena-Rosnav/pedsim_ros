@startuml
title Human
state "root" as root {
  state "animation" as animation {
    [*] --> rest
    state "social_activity" as socialactivity {
      socialactivity --> rest : [social_lo]
      state "phone" as phone {
        phone : **entry** / time_in_state = 0; send("animation", "phone")
        phone : **tick** / stress        += runtime.dt * config.phone_d_stress; energy        += runtime.dt * config.phone_d_energy ; social += runtime.dt * config.phone_d_social
      }
      state "talking" as talking {
        talking : **entry** / time_in_state = 0; send("animation", "talking")
        talking : **tick** / stress        += runtime.dt * config.talking_d_stress; energy        += runtime.dt * config.talking_d_energy ; social += runtime.dt * config.talking_d_social
      }
    }
    state "energy_activity" as energyactivity {
      energyactivity --> rest : [energy_lo]
      state "interacting" as interacting {
        interacting : **entry** / time_in_state = 0; send("animation", "interacting")
        interacting : **tick** / stress        += runtime.dt * config.interacting_d_stress; energy        += runtime.dt * config.interacting_d_energy ; social        += runtime.dt * config.interacting_d_social
      }
      state "running" as running {
        running : **entry** / time_in_state = 0; send("animation", "running")
        running : **tick** / stress        += runtime.dt * config.running_d_stress; energy        += runtime.dt * config.running_d_energy ; social += runtime.dt * config.running_d_social
      }
    }
    state "rest" as rest {
      rest --> phone : [(runtime.rng.random() > (1 - max(0, config.social_hi-social) ** runtime.dt))]
      rest --> running : [(runtime.rng.random() > (1 - max(0, config.energy_hi-energy) ** runtime.dt))]
      rest --> talking : some1 [not social_lo]
      rest --> interacting : some2 [not energy_lo]
      state "walking" as walking {
        walking : **entry** / time_in_state = 0; send("animation", "walking")
        walking : **tick** / stress        += runtime.dt * config.walking_d_stress; energy        += runtime.dt * config.walking_d_energy ; social        += runtime.dt * config.walking_d_social
      }
      state "idle" as idle {
        idle : **entry** / time_in_state = 0; send("animation", "idle")
        idle : **tick** / stress        += runtime.dt * config.idle_d_stress; energy        += runtime.dt * config.idle_d_energy ; social        += runtime.dt * config.idle_d_social
      }
      state "H" as history {
        history --> walking
      }
    }
  }
  --
  state "drift" as drift {
    drift : **entry** / stress = max(config.stress_min, min(config.stress_max, stress));     energy = max(config.energy_min, min(config.energy_max, energy));     social = max(config.social_min, min(config.social_max, social))
    drift --> drift : / time_in_state += 1; stress        += runtime.dt * config.d_stress; energy        += runtime.dt * config.d_energy ; social        += runtime.dt * config.d_social; ; energy_lo = energy <= config.energy_lo; energy_hi = energy >= config.energy_hi; stress_lo = stress <= config.stress_lo; stress_hi = stress >= config.stress_hi; social_lo = social <= config.social_lo; social_hi = social >= config.social_hi
  }
}
@enduml
